{"version":3,"file":"static/js/68.279f8e20.chunk.js","mappings":"iMAEaA,EAAgBC,EAAAA,EAAAA,QAAcC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yDAK9BC,EAAeH,EAAAA,EAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,sK,SCJxBG,EAAU,SAAHC,GAA6B,IAAvBC,EAAKD,EAALC,MAAOC,EAAQF,EAARE,SAC/B,OACEC,EAAAA,EAAAA,MAACV,EAAa,CAAAS,SAAA,EACZE,EAAAA,EAAAA,KAACP,EAAY,CAAAK,SAAED,IACdC,IAGP,C,6KCPaG,GAAaX,EAAAA,EAAAA,GAAOY,EAAAA,GAAPZ,CAAYC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,iIASzBW,EAAQb,EAAAA,EAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,yEAMpBY,GAAQd,EAAAA,EAAAA,GAAOe,EAAAA,GAAPf,CAAagB,IAAAA,GAAAd,EAAAA,EAAAA,GAAA,uRAiBrBe,GAAqBjB,EAAAA,EAAAA,GAAOkB,EAAAA,GAAPlB,CAAoBmB,IAAAA,GAAAjB,EAAAA,EAAAA,GAAA,wFAOzCkB,EAASpB,EAAAA,EAAAA,OAAaqB,IAAAA,GAAAnB,EAAAA,EAAAA,GAAA,8e,SC3B7BoB,EAASC,EAAAA,SAAaC,MAAM,CAChCC,MAAOF,EAAAA,SAEJE,MAAM,+BACNC,SAAS,0BACZC,SAAUJ,EAAAA,SAAaG,SAAS,4BAG5BE,GAAeC,EAAAA,EAAAA,MACfC,GAAkBD,EAAAA,EAAAA,MAElBE,EAAgB,CACpBN,MAAO,GACPE,SAAU,IAGCK,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAYjB,OACExB,EAAAA,EAAAA,KAAAyB,EAAAA,SAAA,CAAA3B,UACEE,EAAAA,EAAAA,KAAC0B,EAAAA,GAAM,CACLL,cAAeA,EACfM,iBAAkBf,EAClBgB,SAfe,SAAHhC,EAAAiC,GAA4C,IAAtCd,EAAKnB,EAALmB,MAAOE,EAAQrB,EAARqB,SAAca,EAASD,EAATC,UAC3CP,GAASQ,EAAAA,EAAAA,IAAM,CAAEhB,MAAAA,EAAOE,SAAAA,KACrBe,SACAC,MAAK,WAAO,IACZC,OAAM,kBACLC,EAAAA,GAAAA,MAAY,gDAAgD,IAEhEL,GACF,EAO6BhC,UAEvBC,EAAAA,EAAAA,MAACE,EAAU,CAAAH,SAAA,EACTE,EAAAA,EAAAA,KAACG,EAAK,CAACiC,QAASlB,EAAapB,SAAC,WAC9BE,EAAAA,EAAAA,KAACI,EAAK,CACJiC,GAAInB,EACJoB,KAAK,QACLC,KAAK,QACLC,YAAY,WAEdxC,EAAAA,EAAAA,KAACO,EAAkB,CAACgC,KAAK,QAAQE,UAAU,OAE3CzC,EAAAA,EAAAA,KAACG,EAAK,CAACiC,QAAShB,EAAgBtB,SAAC,cACjCE,EAAAA,EAAAA,KAACI,EAAK,CACJiC,GAAIjB,EACJkB,KAAK,WACLC,KAAK,WACLC,YAAY,cAEdxC,EAAAA,EAAAA,KAACO,EAAkB,CAACgC,KAAK,WAAWE,UAAU,cAE9CzC,EAAAA,EAAAA,KAACU,EAAM,CAAC4B,KAAK,SAAQxC,SAAC,kBAKhC,E,UCzEa4C,EAAYpD,EAAAA,EAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,8FCoBnC,EAjBc,WACZ,OACEO,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CACG,KACDC,EAAAA,EAAAA,MAAC2C,EAAS,CAAA5C,SAAA,EACRE,EAAAA,EAAAA,KAAC2C,EAAAA,EAAM,CAAA7C,UACLE,EAAAA,EAAAA,KAAA,SAAAF,SAAO,aAGTE,EAAAA,EAAAA,KAACL,EAAAA,EAAO,CAACE,MAAO,qBAAqBC,UACnCE,EAAAA,EAAAA,KAACsB,EAAS,WAKpB,C","sources":["components/Section/Section.styled.jsx","components/Section/Section.jsx","components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","pages/Login/Login.styled.jsx","pages/Login/Login.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const SectionStyled = styled.section`\n  padding-top: 30px;\n  padding-bottom: 15px;\n`;\n\nexport const SectionTitle = styled.h2`\n  font-weight: 700;\n  font-size: 36px;\n  line-height: 42px;\n  text-align: center;\n  letter-spacing: 0.03em;\n  color: #212121;\n  margin-bottom: 12px;\n`;\n","import PropTypes from 'prop-types';\nimport { SectionStyled, SectionTitle } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <SectionStyled>\n      <SectionTitle>{title}</SectionTitle>\n      {children}\n    </SectionStyled>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","import { Form, Field, ErrorMessage } from 'formik';\nimport styled from '@emotion/styled';\n\nexport const StyledForm = styled(Form)`\n  width: 800px;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n`;\n\nexport const Label = styled.label`\n  font-weight: 500;\n  font-size: 22px;\n  line-height: 1.16;\n`;\n\nexport const Input = styled(Field)`\n  font-size: 18px;\n  line-height: 1.16;\n  width: 300px;\n  height: 26px;\n  border: 2px solid #212121;\n  border-radius: 4px;\n  outline: none;\n  padding: 8px 16px;\n  transition: border-color 250ms linear;\n\n  :hover,\n  :focus {\n    border-color: #9700ff;\n  }\n`;\n\nexport const StyledErrorMessage = styled(ErrorMessage)`\n  font-size: 16px;\n  font-weight: 700;\n  line-height: 1.16;\n  color: red;\n`;\n\nexport const Button = styled.button`\n  height: 40px;\n  width: 150px;\n  padding: 8px;\n  background-color: #9700ff;\n  border-radius: 4px;\n  border: 2px solid #fff;\n  color: #fff;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 1.16;\n  text-align: center;\n  letter-spacing: 0.03em;\n  transition: background-color 250ms linear, color 250ms linear,\n    box-shadow 250ms linear;\n  :hover,\n  :focus {\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n    background-color: #fff;\n    color: #9700ff;\n  }\n`;\n","import { Formik } from 'formik';\nimport { nanoid } from 'nanoid';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/authOperations';\nimport * as yup from 'yup';\nimport { toast } from 'react-toastify';\n\nimport {\n  StyledForm,\n  Label,\n  Input,\n  StyledErrorMessage,\n  Button,\n} from 'components/LoginForm/LoginForm.styled';\n\nconst schema = yup.object().shape({\n  email: yup\n    .string()\n    .email('Email must be a valid email')\n    .required('This field is required'),\n  password: yup.string().required('This field is required'),\n});\n\nconst idInputEmail = nanoid();\nconst idInputPassword = nanoid();\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = ({ email, password }, { resetForm }) => {\n    dispatch(logIn({ email, password }))\n      .unwrap()\n      .then(() => {})\n      .catch(() =>\n        toast.error('Something went wrong...Try reloading the page')\n      );\n    resetForm();\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <StyledForm>\n          <Label htmlFor={idInputEmail}>Email</Label>\n          <Input\n            id={idInputEmail}\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Email\"\n          />\n          <StyledErrorMessage name=\"email\" component=\"p\" />\n\n          <Label htmlFor={idInputPassword}>Password</Label>\n          <Input\n            id={idInputPassword}\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Password\"\n          />\n          <StyledErrorMessage name=\"password\" component=\"password\" />\n\n          <Button type=\"submit\">Log in </Button>\n        </StyledForm>\n      </Formik>\n    </>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  width: 1200px;\n  margin: 0 auto;\n  padding-left: 15px;\n  padding-right: 15px;\n`;\n","import { Helmet } from 'react-helmet';\nimport { LoginForm } from 'components/LoginForm';\nimport { Section } from 'components/Section';\nimport { Container } from 'pages/Login/Login.styled';\n\nconst Login = () => {\n  return (\n    <main>\n      {' '}\n      <Container>\n        <Helmet>\n          <title>Login</title>\n        </Helmet>\n\n        <Section title={'Login to Phonebook'}>\n          <LoginForm />\n        </Section>\n      </Container>\n    </main>\n  );\n};\n\nexport default Login;\n"],"names":["SectionStyled","styled","_templateObject","_taggedTemplateLiteral","SectionTitle","_templateObject2","Section","_ref","title","children","_jsxs","_jsx","StyledForm","Form","Label","Input","Field","_templateObject3","StyledErrorMessage","ErrorMessage","_templateObject4","Button","_templateObject5","schema","yup","shape","email","required","password","idInputEmail","nanoid","idInputPassword","initialValues","LoginForm","dispatch","useDispatch","_Fragment","Formik","validationSchema","onSubmit","_ref2","resetForm","logIn","unwrap","then","catch","toast","htmlFor","id","type","name","placeholder","component","Container","Helmet"],"sourceRoot":""}