{"version":3,"file":"static/js/997.5e7b3af9.chunk.js","mappings":"kMAEaA,EAAgBC,EAAAA,EAAAA,QAAcC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yDAK9BC,EAAeH,EAAAA,EAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,sK,SCJxBG,EAAU,SAAHC,GAA6B,IAAvBC,EAAKD,EAALC,MAAOC,EAAQF,EAARE,SAC/B,OACEC,EAAAA,EAAAA,MAACV,EAAa,CAAAS,SAAA,EACZE,EAAAA,EAAAA,KAACP,EAAY,CAAAK,SAAED,IACdC,IAGP,C,uLCRaG,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAM,EAC/CC,EAA0B,SAAAH,GAAK,OAC1CA,EAAMC,SAASG,iBAAkB,EACtBC,EAAsB,SAAAL,GAAK,OAAIA,EAAMC,SAASK,aAAc,EAC5DC,EAAuB,SAAAP,GAAK,OAAIA,EAAMQ,MAAO,EAE7CC,GAAwBC,EAAAA,EAAAA,IACnC,CAACX,EAAgBQ,IACjB,SAACN,EAAUO,GACT,IAAMG,EAAmBH,EAAOI,cAEhC,OAAOX,EAASO,QAAO,SAAAK,GAAO,OAC5BA,EAAQC,KAAKF,cAAcG,SAASJ,EAAiB,GAEzD,I,mBCdWK,EAAe5B,EAAAA,EAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yJAUzB2B,EAAQ7B,EAAAA,EAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,yEAMpB4B,EAAQ9B,EAAAA,EAAAA,MAAY+B,IAAAA,GAAA7B,EAAAA,EAAAA,GAAA,uR,SCZpB8B,EAAS,WACpB,IAAMZ,GAASa,EAAAA,EAAAA,IAAYd,GACrBe,GAAWC,EAAAA,EAAAA,MACjB,OACE1B,EAAAA,EAAAA,MAACmB,EAAY,CAAApB,SAAA,EACXE,EAAAA,EAAAA,KAACmB,EAAK,CAAArB,SAAC,0BACPE,EAAAA,EAAAA,KAACoB,EAAK,CACJM,KAAK,OACLV,KAAK,SACLW,MAAOjB,EACPkB,SAAU,SAAAC,GAAK,OACbL,GAASM,EAAAA,EAAAA,GAAkBD,EAAME,cAAcJ,OAAO,MAKhE,ECpBaK,EAAY1C,EAAAA,EAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,8FAOtByC,EAAO3C,EAAAA,EAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,sK,oBCPjB0C,EAAgB5C,EAAAA,EAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,iIAS1B2C,EAAc7C,EAAAA,EAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,ua,UCL/B4C,EAAYC,SAASC,cAAc,eAE5BC,GAAQ,SAAH3C,GAA+B,IAAzBE,EAAQF,EAARE,SAAU0C,EAAO5C,EAAP4C,SAChCC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAgB,SAAAC,GACL,WAAXA,EAAEC,MACJJ,GAEJ,EAIA,OAFAK,OAAOC,iBAAiB,UAAWJ,GAE5B,WACLG,OAAOE,oBAAoB,UAAWL,EACxC,CACF,GAAG,CAACF,IAQJ,OAAOQ,EAAAA,EAAAA,eACLhD,EAAAA,EAAAA,KAACkC,EAAa,CAACe,QAPW,SAAAN,GACtBA,EAAEO,SAAWP,EAAEZ,eACjBS,GAEJ,EAG8C1C,UAC1CE,EAAAA,EAAAA,KAACmC,EAAW,CAAArC,SACTA,MAILsC,EAEJ,E,kECnCae,I,SAAa7D,EAAAA,EAAAA,GAAO8D,GAAAA,GAAP9D,CAAYC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,kIASzB2B,GAAQ7B,EAAAA,EAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,yEAMpB4B,IAAQ9B,EAAAA,EAAAA,GAAO+D,GAAAA,GAAP/D,CAAa+B,IAAAA,GAAA7B,EAAAA,EAAAA,GAAA,uRAiBrB8D,IAAqBhE,EAAAA,EAAAA,GAAOiE,GAAAA,GAAPjE,CAAoBkE,IAAAA,GAAAhE,EAAAA,EAAAA,GAAA,wFAOzCiE,GAASnE,EAAAA,EAAAA,OAAaoE,IAAAA,GAAAlE,EAAAA,EAAAA,GAAA,8eCnB7BmE,GAASC,GAAAA,SAAaC,MAAM,CAChC7C,KAAM4C,GAAAA,SAAaE,SAAS,0BAC5BC,OAAQH,GAAAA,SAELI,MAAM,MAAM,EAAM,uDAClBF,aAGCG,IAAcC,EAAAA,GAAAA,MACdC,IAAgBD,EAAAA,GAAAA,MAETE,GAAW,SAAHxE,GAAgC,IAA1B4C,EAAO5C,EAAP4C,QAAS6B,EAAEzE,EAAFyE,GAAI1C,EAAK/B,EAAL+B,MAChCH,GAAWC,EAAAA,EAAAA,MACXtB,GAAWoB,EAAAA,EAAAA,IAAYtB,GAEvBqE,EAAgB,CACpBtD,KAAMW,EAAMX,KACZ+C,OAAQpC,EAAMoC,QA6BhB,OACE/D,EAAAA,EAAAA,KAACuE,GAAAA,GAAM,CACLD,cAAeA,EACfE,iBAAkBb,GAClBc,SA9BiB,SAAHC,EAAAC,GAAyC,IAAnC3D,EAAI0D,EAAJ1D,KAAM+C,EAAMW,EAANX,OAAYa,EAASD,EAATC,UAOxC,GANgBzE,EAAS0E,MAAK,SAAA9D,GAC5B,OACEA,EAAQC,KAAKF,gBAAkBE,EAAKF,eAAiBC,EAAQsD,KAAOA,CAExE,IAGES,GAAAA,GAAAA,MAAY,GAADC,OAAI/D,EAAI,+BADrB,CAIA,IAAMgE,EAAO,CAAEX,GAAAA,EAAI1C,MAAO,CAAEX,KAAAA,EAAM+C,OAAAA,IAElCvC,GAASyD,EAAAA,GAAAA,IAAcD,IACpBE,SACAC,MAAK,WACJL,GAAAA,GAAAA,QAAc,mBACdtC,GACF,IACC4C,OAAM,kBACLN,GAAAA,GAAAA,MAAY,gDAAgD,IAGhEF,GAbA,CAcF,EAM2B9E,UAEvBC,EAAAA,EAAAA,MAACoD,GAAU,CAAArD,SAAA,EACTE,EAAAA,EAAAA,KAACmB,GAAK,CAACkE,QAASpB,GAAYnE,SAAC,UAC7BE,EAAAA,EAAAA,KAACoB,GAAK,CAACiD,GAAIJ,GAAavC,KAAK,OAAOV,KAAK,OAAOsE,YAAY,UAC5DtF,EAAAA,EAAAA,KAACsD,GAAkB,CAACtC,KAAK,OAAOuE,UAAU,OAE1CvF,EAAAA,EAAAA,KAACmB,GAAK,CAACkE,QAASlB,GAAcrE,SAAC,YAC/BE,EAAAA,EAAAA,KAACoB,GAAK,CACJiD,GAAIF,GACJzC,KAAK,MACLV,KAAK,SACLsE,YAAY,oBAEdtF,EAAAA,EAAAA,KAACsD,GAAkB,CAACtC,KAAK,SAASuE,UAAU,OAE5CvF,EAAAA,EAAAA,KAACyD,GAAM,CAAC/B,KAAK,SAAQ5B,SAAC,qBAI9B,E,WC1Fa0F,GAAOlG,EAAAA,EAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4QAgBhBiE,GAASnE,EAAAA,EAAAA,OAAaI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,siBA2BtBiG,IAAUnG,EAAAA,EAAAA,GAAOoG,GAAAA,IAAPpG,CAAuB+B,IAAAA,GAAA7B,EAAAA,EAAAA,GAAA,2CAKjCmG,IAAWrG,EAAAA,EAAAA,GAAOsG,GAAAA,IAAPtG,CAAyBkE,IAAAA,GAAAhE,EAAAA,EAAAA,GAAA,2CCzCpCqG,GAAc,SAAHjG,GAA8B,IAAxByE,EAAEzE,EAAFyE,GAAIrD,EAAIpB,EAAJoB,KAAM+C,EAAMnE,EAANmE,OAChCvC,GAAWC,EAAAA,EAAAA,MAEjBqE,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAKxBI,EAAa,WACjBD,GAAa,EACf,EAEA,OACEpG,EAAAA,EAAAA,MAAAsG,EAAAA,SAAA,CAAAvG,SAAA,EACEC,EAAAA,EAAAA,MAACyF,GAAI,CAAA1F,SAAA,EACHE,EAAAA,EAAAA,KAACsG,GAAAA,GAAM,CAACtF,KAAMA,EAAMuF,KAAK,KAAKC,OAAO,KACrCzG,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CACGkB,EAAK,QAAQ+C,MAEhBhE,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEE,EAAAA,EAAAA,KAAA,MAAAF,UACEE,EAAAA,EAAAA,KAACyD,GAAM,CAAC/B,KAAK,SAASuB,QAhBd,WAChBkD,GAAa,EACf,EAcmDrG,UACvCE,EAAAA,EAAAA,KAAC2F,GAAQ,SAGb3F,EAAAA,EAAAA,KAAA,MAAAF,UACEE,EAAAA,EAAAA,KAACyD,GAAM,CAAC/B,KAAK,SAASuB,QAAS,kBAAMzB,GAASiF,EAAAA,GAAAA,IAAcpC,GAAI,EAACvE,UAC/DE,EAAAA,EAAAA,KAACyF,GAAO,cAMfS,IACClG,EAAAA,EAAAA,KAACuC,GAAK,CAACC,QAAS4D,EAAWtG,UACzBE,EAAAA,EAAAA,KAACoE,GAAQ,CAAC5B,QAAS4D,EAAYzE,MAAO,CAAEX,KAAAA,EAAM+C,OAAAA,GAAUM,GAAIA,QAKtE,EChDaqC,GAAOpH,EAAAA,EAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yGCIhBmH,GAAc,WACzB,IAAMxG,GAAWoB,EAAAA,EAAAA,IAAYZ,GAE7B,OACEX,EAAAA,EAAAA,KAAC0G,GAAI,CAAA5G,SACFK,EAASyG,KAAI,SAAAhH,GAA2B,IAAxBoB,EAAIpB,EAAJoB,KAAMqD,EAAEzE,EAAFyE,GAAIN,EAAMnE,EAANmE,OACzB,OAAO/D,EAAAA,EAAAA,KAAC6F,GAAW,CAAUxB,GAAIA,EAAIrD,KAAMA,EAAM+C,OAAQA,GAAhCM,EAC3B,KAGN,E,WCdawC,GAAevH,EAAAA,EAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wDCCzBsH,GAAS,WACpB,OACE/G,EAAAA,EAAAA,MAAC8G,GAAY,CAAA/G,SAAA,EACXE,EAAAA,EAAAA,KAAC+G,GAAAA,GAAY,CACXC,OAAO,MACPC,MAAM,MACNC,MAAM,UACNC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,EACTC,UAAU,yBACVC,iBAAiB,GACjBC,iBAAiB,GACjBC,kBAAkB,KAClB,MAIR,EClBatE,IAAa7D,EAAAA,EAAAA,GAAO8D,GAAAA,GAAP9D,CAAYC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,iIASzB2B,GAAQ7B,EAAAA,EAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,yEAMpB4B,IAAQ9B,EAAAA,EAAAA,GAAO+D,GAAAA,GAAP/D,CAAa+B,IAAAA,GAAA7B,EAAAA,EAAAA,GAAA,uRAiBrB8D,IAAqBhE,EAAAA,EAAAA,GAAOiE,GAAAA,GAAPjE,CAAoBkE,IAAAA,GAAAhE,EAAAA,EAAAA,GAAA,wFAOzCiE,GAASnE,EAAAA,EAAAA,OAAaoE,IAAAA,GAAAlE,EAAAA,EAAAA,GAAA,8eCtB7BmE,GAASC,GAAAA,SAAaC,MAAM,CAChC7C,KAAM4C,GAAAA,SAAaE,SAAS,0BAC5BC,OAAQH,GAAAA,SAELI,MAAM,MAAM,EAAM,uDAClBF,aAGCG,IAAcC,EAAAA,GAAAA,MACdC,IAAgBD,EAAAA,GAAAA,MAEhBI,GAAgB,CACpBtD,KAAM,GACN+C,OAAQ,IAGG2D,GAAc,SAAH9H,GAAqB,IAAf4C,EAAO5C,EAAP4C,QACtBrC,GAAWoB,EAAAA,EAAAA,IAAYtB,GACvBuB,GAAWC,EAAAA,EAAAA,MAiBjB,OACEzB,EAAAA,EAAAA,KAACuE,GAAAA,GAAM,CACLD,cAAeA,GACfE,iBAAkBb,GAClBc,SAnBiB,SAAHC,EAAAC,GAAyC,IAAnC3D,EAAI0D,EAAJ1D,KAAM+C,EAAMW,EAANX,OAAYa,EAASD,EAATC,UACxBzE,EAAS0E,MACvB,SAAA9D,GAAO,OAAIA,EAAQC,KAAKF,gBAAkBE,EAAKF,aAAa,IAI5DgE,GAAAA,GAAAA,MAAY,GAADC,OAAI/D,EAAI,4BAIrBQ,GAASmG,EAAAA,GAAAA,IAAW,CAAE3G,KAAAA,EAAM+C,OAAAA,KAC5BvB,IACAoC,IACF,EAM2B9E,UAEvBC,EAAAA,EAAAA,MAACoD,GAAU,CAAArD,SAAA,EACTE,EAAAA,EAAAA,KAACmB,GAAK,CAACkE,QAASpB,GAAYnE,SAAC,UAC7BE,EAAAA,EAAAA,KAACoB,GAAK,CAACiD,GAAIJ,GAAavC,KAAK,OAAOV,KAAK,OAAOsE,YAAY,UAC5DtF,EAAAA,EAAAA,KAACsD,GAAkB,CAACtC,KAAK,OAAOuE,UAAU,OAE1CvF,EAAAA,EAAAA,KAACmB,GAAK,CAACkE,QAASlB,GAAcrE,SAAC,YAC/BE,EAAAA,EAAAA,KAACoB,GAAK,CACJiD,GAAIF,GACJzC,KAAK,MACLV,KAAK,SACLsE,YAAY,oBAEdtF,EAAAA,EAAAA,KAACsD,GAAkB,CAACtC,KAAK,SAASuE,UAAU,OAE5CvF,EAAAA,EAAAA,KAACyD,GAAM,CAAC/B,KAAK,SAAQ5B,SAAC,oBAI9B,E,WC3Ea2D,GAASnE,EAAAA,EAAAA,OAAaC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,woBAgCtBoI,IAAOtI,EAAAA,EAAAA,GAAOuI,GAAAA,IAAPvI,CAAqBI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,2CC/B5BsI,GAAY,WACvB,IAAAhC,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAKxBI,EAAa,WACjBD,GAAa,EACf,EACA,OACEpG,EAAAA,EAAAA,MAAAsG,EAAAA,SAAA,CAAAvG,SAAA,EACEC,EAAAA,EAAAA,MAAC0D,GAAM,CAAC/B,KAAK,SAASuB,QARR,WAChBkD,GAAa,EACf,EAM6CrG,SAAA,EACvCE,EAAAA,EAAAA,KAAA,QAAAF,SAAM,gBAAkB,KAACE,EAAAA,EAAAA,KAAC4H,GAAI,OAE/B1B,IACClG,EAAAA,EAAAA,KAACuC,GAAK,CAACC,QAAS4D,EAAWtG,UACzBE,EAAAA,EAAAA,KAAC0H,GAAW,CAAClF,QAAS4D,QAKhC,ECqBA,GA5BiB,WACf,IAAM5E,GAAWC,EAAAA,EAAAA,MACXnB,GAAoBiB,EAAAA,EAAAA,IAAYlB,GAChCG,GAAgBe,EAAAA,EAAAA,IAAYhB,GAMlC,OAJAkC,EAAAA,EAAAA,YAAU,WACRjB,GAASuG,EAAAA,GAAAA,MACX,GAAG,CAACvG,KAGFxB,EAAAA,EAAAA,KAAA,QAAAF,UACEC,EAAAA,EAAAA,MAACiC,EAAS,CAAAlC,SAAA,EACRE,EAAAA,EAAAA,KAACgI,EAAAA,EAAM,CAAAlI,UACLE,EAAAA,EAAAA,KAAA,SAAAF,SAAO,gBAGTC,EAAAA,EAAAA,MAACJ,EAAAA,EAAO,CAACE,MAAO,eAAeC,SAAA,EAC7BE,EAAAA,EAAAA,KAAC8H,GAAS,KACV9H,EAAAA,EAAAA,KAACsB,EAAM,IACNhB,IAAsBE,IAAiBR,EAAAA,EAAAA,KAAC8G,GAAM,IAC9CtG,IAAiBR,EAAAA,EAAAA,KAACiC,EAAI,CAAAnC,SAAEU,KACzBR,EAAAA,EAAAA,KAAC2G,GAAW,WAKtB,C","sources":["components/Section/Section.styled.jsx","components/Section/Section.jsx","redux/contacts/contactsSelectors.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.jsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/EditForm/EditForm.styled.jsx","components/EditForm/EditForm.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/AddButton/AddButton.styled.jsx","components/AddButton/AddButton.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const SectionStyled = styled.section`\n  padding-top: 30px;\n  padding-bottom: 15px;\n`;\n\nexport const SectionTitle = styled.h2`\n  font-weight: 700;\n  font-size: 36px;\n  line-height: 42px;\n  text-align: center;\n  letter-spacing: 0.03em;\n  color: #212121;\n  margin-bottom: 12px;\n`;\n","import PropTypes from 'prop-types';\nimport { SectionStyled, SectionTitle } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <SectionStyled>\n      <SectionTitle>{title}</SectionTitle>\n      {children}\n    </SectionStyled>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectContactsIsLoading = state =>\n  state.contacts.contactsIsLoading;\nexport const selectContactsError = state => state.contacts.contactsError;\nexport const selectContactsFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectContactsFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import styled from '@emotion/styled';\n\nexport const FilterStyled = styled.div`\n  width: 800px;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  margin-bottom: 16px;\n`;\n\nexport const Label = styled.label`\n  font-weight: 500;\n  font-size: 22px;\n  line-height: 1.16;\n`;\n\nexport const Input = styled.input`\n  font-size: 18px;\n  line-height: 1.16;\n  width: 300px;\n  height: 26px;\n  border: 2px solid #212121;\n  border-radius: 4px;\n  outline: none;\n  padding: 8px 16px;\n  transition: border-color 250ms linear;\n\n  :hover,\n  :focus {\n    border-color: #9700ff;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilterContacts } from 'redux/filterSlice';\nimport { selectContactsFilter } from 'redux/contacts/contactsSelectors';\n\nimport { FilterStyled, Input, Label } from './Filter.styled';\n\nexport const Filter = () => {\n  const filter = useSelector(selectContactsFilter);\n  const dispatch = useDispatch();\n  return (\n    <FilterStyled>\n      <Label>Find contact by name</Label>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={event =>\n          dispatch(setFilterContacts(event.currentTarget.value))\n        }\n      />\n    </FilterStyled>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  width: 1200px;\n  margin: 0 auto;\n  padding-left: 15px;\n  padding-right: 15px;\n`;\n\nexport const Text = styled.div`\n  font-weight: 500;\n  font-size: 24px;\n  line-height: 26px;\n  text-align: center;\n  letter-spacing: 0.03em;\n  color: #212121;\n  margin-bottom: 12px;\n`;\n","import styled from '@emotion/styled';\n\nexport const ModalBackdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n`;\n\nexport const ModalContet = styled.div`\n  position: absolute;\n\n  display: flex;\n\n  align-items: center;\n  justify-content: center;\n\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  height: 300px;\n  max-width: 450px;\n  width: 100%;\n  background-color: #fff;\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14),\n    0px 2px 1px rgba(0, 0, 0, 0.2);\n  border-radius: 4px;\n  border: 2px solid #fff;\n`;\n","import { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { ModalBackdrop, ModalContet } from './Modal.styled';\nimport { createPortal } from 'react-dom';\n// import { ContactForm } from 'components/ContactForm';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const Modal = ({ children, onClose }) => {\n  useEffect(() => {\n    const hendelKeyDown = e => {\n      if (e.code === 'Escape') {\n        onClose();\n      }\n    };\n\n    window.addEventListener('keydown', hendelKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', hendelKeyDown);\n    };\n  }, [onClose]);\n\n  const hendleBackdropClick = e => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <ModalBackdrop onClick={hendleBackdropClick}>\n      <ModalContet>\n        {children}\n        {/* <ContactForm onClose={onClose} /> */}\n      </ModalContet>\n    </ModalBackdrop>,\n    modalRoot\n  );\n};\n\nModal.propTypes = {\n  children: PropTypes.node.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n","import { Form, Field, ErrorMessage } from 'formik';\nimport styled from '@emotion/styled';\n\nexport const StyledForm = styled(Form)`\n  width: 800px;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n`;\n\nexport const Label = styled.label`\n  font-weight: 500;\n  font-size: 22px;\n  line-height: 1.16;\n`;\n\nexport const Input = styled(Field)`\n  font-size: 18px;\n  line-height: 1.16;\n  width: 300px;\n  height: 26px;\n  border: 2px solid #212121;\n  border-radius: 4px;\n  outline: none;\n  padding: 8px 16px;\n  transition: border-color 250ms linear;\n\n  :hover,\n  :focus {\n    border-color: #9700ff;\n  }\n`;\n\nexport const StyledErrorMessage = styled(ErrorMessage)`\n  font-size: 16px;\n  font-weight: 700;\n  line-height: 1.16;\n  color: red;\n`;\n\nexport const Button = styled.button`\n  height: 40px;\n  width: 150px;\n  padding: 8px;\n  background-color: #9700ff;\n  border-radius: 4px;\n  border: 2px solid #fff;\n  color: #fff;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 1.16;\n  text-align: center;\n  letter-spacing: 0.03em;\n  transition: background-color 250ms linear, color 250ms linear,\n    box-shadow 250ms linear;\n  :hover,\n  :focus {\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n    background-color: #fff;\n    color: #9700ff;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\n\nimport { updateContact } from 'redux/contacts/contactsOperations';\n\nimport { useSelector } from 'react-redux/es/exports';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\n\nimport { toast } from 'react-toastify';\n\nimport { nanoid } from 'nanoid';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport 'yup-phone';\n\nimport {\n  StyledForm,\n  Label,\n  Input,\n  StyledErrorMessage,\n  Button,\n} from './EditForm.styled';\n\nconst schema = yup.object().shape({\n  name: yup.string().required('This field is required'),\n  number: yup\n    .string()\n    .phone(null, true, 'Enter your phone number in the format +000000000000')\n    .required(),\n});\n\nconst idInputName = nanoid();\nconst idInputNumber = nanoid();\n\nexport const EditForm = ({ onClose, id, value }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const initialValues = {\n    name: value.name,\n    number: value.number,\n  };\n\n  const handleSubmit = ({ name, number }, { resetForm }) => {\n    const hasName = contacts.some(contact => {\n      return (\n        contact.name.toLowerCase() === name.toLowerCase() && contact.id !== id\n      );\n    });\n\n    if (hasName) {\n      toast.error(`${name} is alredy in contacts`);\n      return;\n    }\n    const data = { id, value: { name, number } };\n\n    dispatch(updateContact(data))\n      .unwrap()\n      .then(() => {\n        toast.success('Contact edited!');\n        onClose();\n      })\n      .catch(() =>\n        toast.error('Something went wrong...Try reloading the page')\n      );\n\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <StyledForm>\n        <Label htmlFor={idInputName}>Name</Label>\n        <Input id={idInputName} type=\"text\" name=\"name\" placeholder=\"Name\" />\n        <StyledErrorMessage name=\"name\" component=\"p\" />\n\n        <Label htmlFor={idInputNumber}>Number</Label>\n        <Input\n          id={idInputNumber}\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"+0000000000000\"\n        />\n        <StyledErrorMessage name=\"number\" component=\"p\" />\n\n        <Button type=\"submit\">Edit contact</Button>\n      </StyledForm>\n    </Formik>\n  );\n};\n\nEditForm.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\nimport { MdDeleteForever, MdModeEditOutline } from 'react-icons/md';\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n  padding: 8px;\n  background-color: rgba(192, 192, 192, 0.5);\n  border-radius: 8px;\n  font-size: 20px;\n  line-height: 1.16;\n\n  > ul {\n    display: flex;\n    gap: 16px;\n  }\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  height: 40px;\n  width: 40px;\n\n  background-color: #9700ff;\n  border-radius: 50%;\n  border: 2px solid #fff;\n  color: #fff;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 1.16;\n  text-align: center;\n  letter-spacing: 0.03em;\n  transition: background-color 250ms linear, color 250ms linear,\n    box-shadow 250ms linear;\n  :hover,\n  :focus {\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n    background-color: #fff;\n    color: #9700ff;\n  }\n`;\n\nexport const IconDel = styled(MdDeleteForever)`\n  width: 24px;\n  height: 24px;\n`;\n\nexport const IconEdit = styled(MdModeEditOutline)`\n  width: 24px;\n  height: 24px;\n`;\n","import { useState } from 'react';\nimport { Modal } from 'components/Modal';\nimport { useDispatch } from 'react-redux/es/exports';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport Avatar from 'react-avatar';\n\nimport { EditForm } from 'components/EditForm/EditForm';\nimport PropTypes from 'prop-types';\nimport { Item, Button, IconDel, IconEdit } from './ContactItem.styled';\n\nexport const ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const [showModal, setShowmodal] = useState(false);\n\n  const openModal = () => {\n    setShowmodal(true);\n  };\n  const closeModal = () => {\n    setShowmodal(false);\n  };\n\n  return (\n    <>\n      <Item>\n        <Avatar name={name} size=\"50\" round={true} />\n        <p>\n          {name}:&nbsp;{number}\n        </p>\n        <ul>\n          <li>\n            <Button type=\"button\" onClick={openModal}>\n              <IconEdit />\n            </Button>\n          </li>\n          <li>\n            <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n              <IconDel />\n            </Button>\n          </li>\n        </ul>\n      </Item>\n\n      {showModal && (\n        <Modal onClose={closeModal}>\n          <EditForm onClose={closeModal} value={{ name, number }} id={id} />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  width: 650px;\n  margin: 0 auto;\n`;\n","import { useSelector } from 'react-redux/es/exports';\nimport { selectVisibleContacts } from 'redux/contacts/contactsSelectors';\n\nimport { ContactItem } from 'components/ContactItem';\nimport { List } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <List>\n      {contacts.map(({ name, id, number }) => {\n        return <ContactItem key={id} id={id} name={name} number={number} />;\n      })}\n    </List>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const StyledLoader = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import { ThreeCircles } from 'react-loader-spinner';\nimport { StyledLoader } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <StyledLoader>\n      <ThreeCircles\n        height=\"100\"\n        width=\"100\"\n        color=\"#FF6600\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n        ariaLabel=\"three-circles-rotating\"\n        outerCircleColor=\"\"\n        innerCircleColor=\"\"\n        middleCircleColor=\"\"\n      />\n      ;\n    </StyledLoader>\n  );\n};\n","import { Form, Field, ErrorMessage } from 'formik';\nimport styled from '@emotion/styled';\n\nexport const StyledForm = styled(Form)`\n  width: 800px;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n`;\n\nexport const Label = styled.label`\n  font-weight: 500;\n  font-size: 22px;\n  line-height: 1.16;\n`;\n\nexport const Input = styled(Field)`\n  font-size: 18px;\n  line-height: 1.16;\n  width: 300px;\n  height: 26px;\n  border: 2px solid #212121;\n  border-radius: 4px;\n  outline: none;\n  padding: 8px 16px;\n  transition: border-color 250ms linear;\n\n  :hover,\n  :focus {\n    border-color: #9700ff;\n  }\n`;\n\nexport const StyledErrorMessage = styled(ErrorMessage)`\n  font-size: 16px;\n  font-weight: 700;\n  line-height: 1.16;\n  color: red;\n`;\n\nexport const Button = styled.button`\n  height: 40px;\n  width: 150px;\n  padding: 8px;\n  background-color: #9700ff;\n  border-radius: 4px;\n  border: 2px solid #fff;\n  color: #fff;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 1.16;\n  text-align: center;\n  letter-spacing: 0.03em;\n  transition: background-color 250ms linear, color 250ms linear,\n    box-shadow 250ms linear;\n  :hover,\n  :focus {\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n    background-color: #fff;\n    color: #9700ff;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { useSelector } from 'react-redux/es/exports';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\nimport { toast } from 'react-toastify';\n\nimport { nanoid } from 'nanoid';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport 'yup-phone';\n\nimport {\n  StyledForm,\n  Label,\n  Input,\n  StyledErrorMessage,\n  Button,\n} from './ContactForm.styled';\n\nconst schema = yup.object().shape({\n  name: yup.string().required('This field is required'),\n  number: yup\n    .string()\n    .phone(null, true, 'Enter your phone number in the format +000000000000')\n    .required(),\n});\n\nconst idInputName = nanoid();\nconst idInputNumber = nanoid();\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = ({ onClose }) => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = ({ name, number }, { resetForm }) => {\n    const hasName = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (hasName) {\n      toast.error(`${name} is alredy in contacts`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    onClose();\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <StyledForm>\n        <Label htmlFor={idInputName}>Name</Label>\n        <Input id={idInputName} type=\"text\" name=\"name\" placeholder=\"Name\" />\n        <StyledErrorMessage name=\"name\" component=\"p\" />\n\n        <Label htmlFor={idInputNumber}>Number</Label>\n        <Input\n          id={idInputNumber}\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"+0000000000000\"\n        />\n        <StyledErrorMessage name=\"number\" component=\"p\" />\n\n        <Button type=\"submit\">Add contact</Button>\n      </StyledForm>\n    </Formik>\n  );\n};\n\nContactForm.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nimport { IoMdPersonAdd } from 'react-icons/io';\n\nexport const Button = styled.button`\n  margin: 36px auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n\n  padding: 8px 16px;\n  border-radius: 50%;\n\n  width: 100px;\n  height: 100px;\n  padding: 8px;\n  background-color: #9700ff;\n\n  border: 2px solid #fff;\n  color: #fff;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 1.16;\n  text-align: center;\n  letter-spacing: 0.03em;\n  transition: background-color 250ms linear, color 250ms linear,\n    box-shadow 250ms linear;\n  :hover,\n  :focus {\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n    background-color: #fff;\n    color: #9700ff;\n  }\n`;\n\nexport const Icon = styled(IoMdPersonAdd)`\n  width: 30px;\n  height: 30px;\n`;\n","import { useState } from 'react';\nimport { Modal } from 'components/Modal';\nimport { ContactForm } from 'components/ContactForm';\nimport { Button, Icon } from './AddButton.styled';\n\nexport const AddButton = () => {\n  const [showModal, setShowmodal] = useState(false);\n\n  const openModal = () => {\n    setShowmodal(true);\n  };\n  const closeModal = () => {\n    setShowmodal(false);\n  };\n  return (\n    <>\n      <Button type=\"button\" onClick={openModal}>\n        <span>Add contact</span> <Icon />\n      </Button>\n      {showModal && (\n        <Modal onClose={closeModal}>\n          <ContactForm onClose={closeModal} />\n        </Modal>\n      )}\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Section } from 'components/Section';\n\nimport { Filter } from 'components/Filter';\nimport { Container } from 'pages/Contacts/Contacts.styled';\nimport { ContactList } from 'components/ContactList';\nimport { Loader } from 'components/Loader';\nimport { Text } from 'pages/Contacts/Contacts.styled';\n\nimport {\n  selectContactsError,\n  selectContactsIsLoading,\n} from 'redux/contacts/contactsSelectors';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { AddButton } from 'components/AddButton/AddButton';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const contactsIsLoading = useSelector(selectContactsIsLoading);\n  const contactsError = useSelector(selectContactsError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <main>\n      <Container>\n        <Helmet>\n          <title>Contacts</title>\n        </Helmet>\n\n        <Section title={'Contact List'}>\n          <AddButton />\n          <Filter />\n          {contactsIsLoading && !contactsError && <Loader />}\n          {contactsError && <Text>{contactsError}</Text>}\n          <ContactList />\n        </Section>\n      </Container>\n    </main>\n  );\n};\n\nexport default Contacts;\n"],"names":["SectionStyled","styled","_templateObject","_taggedTemplateLiteral","SectionTitle","_templateObject2","Section","_ref","title","children","_jsxs","_jsx","selectContacts","state","contacts","items","selectContactsIsLoading","contactsIsLoading","selectContactsError","contactsError","selectContactsFilter","filter","selectVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","FilterStyled","Label","Input","_templateObject3","Filter","useSelector","dispatch","useDispatch","type","value","onChange","event","setFilterContacts","currentTarget","Container","Text","ModalBackdrop","ModalContet","modalRoot","document","querySelector","Modal","onClose","useEffect","hendelKeyDown","e","code","window","addEventListener","removeEventListener","createPortal","onClick","target","StyledForm","Form","Field","StyledErrorMessage","ErrorMessage","_templateObject4","Button","_templateObject5","schema","yup","shape","required","number","phone","idInputName","nanoid","idInputNumber","EditForm","id","initialValues","Formik","validationSchema","onSubmit","_ref2","_ref3","resetForm","some","toast","concat","data","updateContact","unwrap","then","catch","htmlFor","placeholder","component","Item","IconDel","MdDeleteForever","IconEdit","MdModeEditOutline","ContactItem","_useState","useState","_useState2","_slicedToArray","showModal","setShowmodal","closeModal","_Fragment","Avatar","size","round","deleteContact","List","ContactList","map","StyledLoader","Loader","ThreeCircles","height","width","color","wrapperStyle","wrapperClass","visible","ariaLabel","outerCircleColor","innerCircleColor","middleCircleColor","ContactForm","addContact","Icon","IoMdPersonAdd","AddButton","fetchContacts","Helmet"],"sourceRoot":""}